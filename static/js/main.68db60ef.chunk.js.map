{"version":3,"sources":["App.jsx","serviceWorker.js","index.jsx"],"names":["App","className","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sJAqGeA,MAlGf,WACE,OACE,yBAAKC,UAAU,WACb,6BACE,2CACA,sDACA,uBAAGC,KAAK,qDAAR,qDACA,oDAEF,6BACE,8CACA,iPAEF,6BACE,6CACA,4BACE,uCAEE,4BACE,wDACA,+FAGJ,sCAEE,4BACE,4GACA,0EAGJ,qCAEE,4BACE,gEACA,4DAKR,6BACE,gDACA,mDACA,iDACA,+DACA,4BACE,4IACA,yFACA,uFACA,8GACA,uFAEF,mDACA,iDACA,qEACA,4BACE,gGACA,mHAEF,kHACA,4BACE,oGACA,sFACA,sFACA,2GACA,2FACA,wEACA,oGACA,qGACA,yEACA,yFAGJ,6BACE,yCACA,0DACA,sEACA,+CACA,kHACA,4BACE,kFACA,2DACA,0EAEF,0DACA,mEACA,+CACA,8CACA,4BACE,sEACA,+HACA,0EACA,iEClFUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.68db60ef.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <div>\r\n        <h1>You-Ran Nai</h1>\r\n        <p>New Taipei City, Taiwan</p>\r\n        <a href=\"https://www.linkedin.com/in/you-ran-nai-7b4415ab/\">https://www.linkedin.com/in/you-ran-nai-7b4415ab/</a>\r\n        <p>skyran1278@gmail.com</p>\r\n      </div>\r\n      <div>\r\n        <h2>CAREER SUMMARY</h2>\r\n        <p>I am a web developer and a structure engineer with more than three years of experience working at Elements Structure. Combines structural engineering domain knowledge with web development to add product value.</p>\r\n      </div>\r\n      <div>\r\n        <h2>SKILL SUMMARY</h2>\r\n        <ul>\r\n          <li>\r\n            Frontend\r\n            <ul>\r\n              <li>Proficient: React, Redux</li>\r\n              <li>Intermediate: Styled Component, CSS Module, Webpack, Electron</li>\r\n            </ul>\r\n          </li>\r\n          <li>\r\n            Backend\r\n            <ul>\r\n              <li>Proficient: Node.js, Express.js, Restful API, MongoDB, Mongoose, Nginx, Jest</li>\r\n              <li>Intermediate: Firebase, MySQL, PM2, Gulp</li>\r\n            </ul>\r\n          </li>\r\n          <li>\r\n            DevOps\r\n            <ul>\r\n              <li>Proficient: Docker, Linux, CI/CD</li>\r\n              <li>Intermediate: Azure, GCP</li>\r\n            </ul>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <div>\r\n        <h2>WORK EXPERIENCES</h2>\r\n        <h3>Full Stack Engineer</h3>\r\n        <p>Elements Structure</p>\r\n        <p>Aug 2019 – Present (11 mos)</p>\r\n        <ul>\r\n          <li>Used React and Redux for internal management of systems, including account management and reporting systems.</li>\r\n          <li>Built RESTful APIs for Node/Express and MongoDB/Mongoose.</li>\r\n          <li>Developed notification and backup services via Node.js.</li>\r\n          <li>Deploy servers using Docker and use Nginx as an HTTP and reverse proxy server.</li>\r\n          <li>Maintained a CI/CD system with Circle and GitHub flow.</li>\r\n        </ul>\r\n        <h3>Full Stack Engineer</h3>\r\n        <p>Elements Structure</p>\r\n        <p>Jun 2016 – Jul 2019 (3 yrs 2 mos)</p>\r\n        <ul>\r\n          <li>Developed as an on-site management system using React and Redux.</li>\r\n          <li>Use Firebase to address Authentication, Database, Storage, Hosting, and Functions.</li>\r\n        </ul>\r\n        <p>Writing programs to aid engineers in designing and analyzing structure engineering.</p>\r\n        <ul>\r\n          <li>EtabsScan: Check the structure and analyze whether it is reasonable.</li>\r\n          <li>LapLength: Optimizing the lap length of reinforcement.</li>\r\n          <li>TimeSheetManageSystem: Project cost statistics system.</li>\r\n          <li>BeamZValue: Steel structure members are optimized according to the Z value.</li>\r\n          <li>SRCSelector: Select the SRC section according to PMM Curve.</li>\r\n          <li>BeamForces: Help design the SRC section.</li>\r\n          <li>RCScan: Check whether the RC reinforcement meets the specifications.</li>\r\n          <li>AngleChange: Check whether the angle radius meets the specifications.</li>\r\n          <li>AttendanceRecords: Staff hour statistics.</li>\r\n          <li>StoryDrifts: Automatically generate story drifts chart.</li>\r\n        </ul>\r\n      </div>\r\n      <div>\r\n        <h2>EDUCATION</h2>\r\n        <h3>National Taiwan University</h3>\r\n        <p>Master&#39;s degree, Structural Engineering</p>\r\n        <p>2017 – 2019</p>\r\n        <p>Thesis - &quot;Feasibility of Beam Reinforcement Optimization for Practical Application&quot;</p>\r\n        <ul>\r\n          <li>Developing an Algorithm to Optimize Reinforcement.</li>\r\n          <li>Nonlinear dynamic analysis.</li>\r\n          <li>Developing a GUI which written in Python.</li>\r\n        </ul>\r\n        <h3>National Taiwan University</h3>\r\n        <p>Bachelor&#39;s degree, Civil Engineering</p>\r\n        <p>2013 – 2017</p>\r\n        <p>Related courses</p>\r\n        <ul>\r\n          <li>EE 3011 Data Structure and Programming</li>\r\n          <li>CSX 2003 Website Database Programming (Using Azure, Express, and Bootstrap to build a website.)</li>\r\n          <li>CIE 5086 Technology and Application of BIM</li>\r\n          <li>CIE 1008 Computer Programming</li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'normalize.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}